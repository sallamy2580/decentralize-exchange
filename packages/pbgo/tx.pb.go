// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx.proto

package pbgo

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Transaction types.
type TransactionTypes int32

const (
	TransactionTypes_SMARTCONTRACT TransactionTypes = 0
	TransactionTypes_FIRSTBLOCK    TransactionTypes = 1
	TransactionTypes_STOPNETWORK   TransactionTypes = 2
)

var TransactionTypes_name = map[int32]string{
	0: "SMARTCONTRACT",
	1: "FIRSTBLOCK",
	2: "STOPNETWORK",
}

var TransactionTypes_value = map[string]int32{
	"SMARTCONTRACT": 0,
	"FIRSTBLOCK":    1,
	"STOPNETWORK":   2,
}

func (x TransactionTypes) String() string {
	return proto.EnumName(TransactionTypes_name, int32(x))
}

func (TransactionTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{0}
}

// Transaction invoke status.
type TxInvokeStatus int32

const (
	TxInvokeStatus_SUCCESS TxInvokeStatus = 0
	TxInvokeStatus_PENALTY TxInvokeStatus = 1
	TxInvokeStatus_FAIL    TxInvokeStatus = 2
	TxInvokeStatus_PENDING TxInvokeStatus = 3
)

var TxInvokeStatus_name = map[int32]string{
	0: "SUCCESS",
	1: "PENALTY",
	2: "FAIL",
	3: "PENDING",
}

var TxInvokeStatus_value = map[string]int32{
	"SUCCESS": 0,
	"PENALTY": 1,
	"FAIL":    2,
	"PENDING": 3,
}

func (x TxInvokeStatus) String() string {
	return proto.EnumName(TxInvokeStatus_name, int32(x))
}

func (TxInvokeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{1}
}

type FirstBlock struct {
	KeyId                 int64  `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Timestamp             int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PublicKey             []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	NodePublicKey         []byte `protobuf:"bytes,4,opt,name=node_public_key,json=nodePublicKey,proto3" json:"node_public_key,omitempty"`
	StopNetworkCertBundle []byte `protobuf:"bytes,5,opt,name=stop_network_cert_bundle,json=stopNetworkCertBundle,proto3" json:"stop_network_cert_bundle,omitempty"`
	Test                  int64  `protobuf:"varint,6,opt,name=test,proto3" json:"test,omitempty"`
	PrivateBlockchain     uint64 `protobuf:"varint,7,opt,name=private_blockchain,json=privateBlockchain,proto3" json:"private_blockchain,omitempty"`
}

func (m *FirstBlock) Reset()         { *m = FirstBlock{} }
func (m *FirstBlock) String() string { return proto.CompactTextString(m) }
func (*FirstBlock) ProtoMessage()    {}
func (*FirstBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{0}
}
func (m *FirstBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirstBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirstBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirstBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstBlock.Merge(m, src)
}
func (m *FirstBlock) XXX_Size() int {
	return m.Size()
}
func (m *FirstBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstBlock.DiscardUnknown(m)
}

var xxx_messageInfo_FirstBlock proto.InternalMessageInfo

func (m *FirstBlock) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *FirstBlock) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FirstBlock) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *FirstBlock) GetNodePublicKey() []byte {
	if m != nil {
		return m.NodePublicKey
	}
	return nil
}

func (m *FirstBlock) GetStopNetworkCertBundle() []byte {
	if m != nil {
		return m.StopNetworkCertBundle
	}
	return nil
}

func (m *FirstBlock) GetTest() int64 {
	if m != nil {
		return m.Test
	}
	return 0
}

func (m *FirstBlock) GetPrivateBlockchain() uint64 {
	if m != nil {
		return m.PrivateBlockchain
	}
	return 0
}

type StopNetwork struct {
	KeyId           int64  `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Timestamp       int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	StopNetworkCert []byte `protobuf:"bytes,3,opt,name=stop_network_cert,json=stopNetworkCert,proto3" json:"stop_network_cert,omitempty"`
}

func (m *StopNetwork) Reset()         { *m = StopNetwork{} }
func (m *StopNetwork) String() string { return proto.CompactTextString(m) }
func (*StopNetwork) ProtoMessage()    {}
func (*StopNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{1}
}
func (m *StopNetwork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopNetwork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopNetwork.Merge(m, src)
}
func (m *StopNetwork) XXX_Size() int {
	return m.Size()
}
func (m *StopNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_StopNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_StopNetwork proto.InternalMessageInfo

func (m *StopNetwork) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *StopNetwork) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *StopNetwork) GetStopNetworkCert() []byte {
	if m != nil {
		return m.StopNetworkCert
	}
	return nil
}

func init() {
	proto.RegisterEnum("pbgo.TransactionTypes", TransactionTypes_name, TransactionTypes_value)
	proto.RegisterEnum("pbgo.TxInvokeStatus", TxInvokeStatus_name, TxInvokeStatus_value)
	proto.RegisterType((*FirstBlock)(nil), "pbgo.FirstBlock")
	proto.RegisterType((*StopNetwork)(nil), "pbgo.StopNetwork")
}

func init() { proto.RegisterFile("tx.proto", fileDescriptor_0fd2153dc07d3b5c) }

var fileDescriptor_0fd2153dc07d3b5c = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x6f, 0xda, 0x30,
	0x18, 0xc6, 0x63, 0x48, 0x69, 0xfb, 0xb2, 0x96, 0x60, 0xa9, 0x52, 0x0e, 0x5b, 0x84, 0x7a, 0x98,
	0x10, 0x12, 0xe5, 0xb0, 0xc3, 0xce, 0x49, 0x06, 0x53, 0x04, 0x0b, 0x28, 0xf1, 0xb4, 0x3f, 0x97,
	0xc8, 0x09, 0x16, 0xb5, 0x02, 0x71, 0x14, 0x9b, 0x8e, 0xdc, 0xf7, 0x01, 0xf6, 0xb1, 0x76, 0xec,
	0x71, 0xc7, 0x09, 0xbe, 0xc8, 0x94, 0x14, 0xb5, 0xd3, 0x76, 0xeb, 0xcd, 0x7e, 0x7e, 0x8f, 0xad,
	0xe7, 0x7d, 0xf5, 0xc0, 0x99, 0xda, 0xdd, 0xe4, 0x85, 0x50, 0x02, 0xeb, 0x79, 0xbc, 0x12, 0xd7,
	0xdf, 0x1b, 0x00, 0x13, 0x5e, 0x48, 0xe5, 0xac, 0x45, 0x92, 0xe2, 0x2b, 0x68, 0xa5, 0xac, 0x8c,
	0xf8, 0xd2, 0x44, 0x3d, 0xd4, 0x6f, 0x06, 0x27, 0x29, 0x2b, 0xbd, 0x25, 0x7e, 0x09, 0xe7, 0x8a,
	0x6f, 0x98, 0x54, 0x74, 0x93, 0x9b, 0x8d, 0x9a, 0x3c, 0x09, 0xf8, 0x15, 0x40, 0xbe, 0x8d, 0xd7,
	0x3c, 0x89, 0x52, 0x56, 0x9a, 0xcd, 0x1e, 0xea, 0xbf, 0x08, 0xce, 0x1f, 0x94, 0x29, 0x2b, 0xf1,
	0x6b, 0xe8, 0x64, 0x62, 0xc9, 0xa2, 0xbf, 0x3c, 0x7a, 0xed, 0xb9, 0xa8, 0xe4, 0xc5, 0xa3, 0xef,
	0x2d, 0x98, 0x52, 0x89, 0x3c, 0xca, 0x98, 0xfa, 0x26, 0x8a, 0x34, 0x4a, 0x58, 0xa1, 0xa2, 0x78,
	0x9b, 0x2d, 0xd7, 0xcc, 0x3c, 0xa9, 0x1f, 0x5c, 0x55, 0xdc, 0x7f, 0xc0, 0x2e, 0x2b, 0x94, 0x53,
	0x43, 0x8c, 0x41, 0x57, 0x4c, 0x2a, 0xb3, 0x55, 0x07, 0xab, 0xcf, 0x78, 0x08, 0x38, 0x2f, 0xf8,
	0x1d, 0x55, 0x2c, 0x8a, 0xab, 0xc9, 0x92, 0x5b, 0xca, 0x33, 0xf3, 0xb4, 0x87, 0xfa, 0x7a, 0xd0,
	0x3d, 0x12, 0xe7, 0x11, 0x5c, 0x67, 0xd0, 0x0e, 0x9f, 0xfe, 0x7e, 0xde, 0x1a, 0x06, 0xd0, 0xfd,
	0x2f, 0xff, 0x71, 0x1b, 0x9d, 0x7f, 0x82, 0x0f, 0x26, 0x60, 0x90, 0x82, 0x66, 0x92, 0x26, 0x8a,
	0x8b, 0x8c, 0x94, 0x39, 0x93, 0xb8, 0x0b, 0x17, 0xe1, 0x07, 0x3b, 0x20, 0xee, 0xdc, 0x27, 0x81,
	0xed, 0x12, 0x43, 0xc3, 0x97, 0x00, 0x13, 0x2f, 0x08, 0x89, 0x33, 0x9b, 0xbb, 0x53, 0x03, 0xe1,
	0x0e, 0xb4, 0x43, 0x32, 0x5f, 0xf8, 0x63, 0xf2, 0x69, 0x1e, 0x4c, 0x8d, 0xc6, 0xc0, 0x86, 0x4b,
	0xb2, 0xf3, 0xb2, 0x3b, 0x91, 0xb2, 0x50, 0x51, 0xb5, 0x95, 0xb8, 0x0d, 0xa7, 0xe1, 0x47, 0xd7,
	0x1d, 0x87, 0xa1, 0xa1, 0x55, 0x97, 0xc5, 0xd8, 0xb7, 0x67, 0xe4, 0x8b, 0x81, 0xf0, 0x19, 0xe8,
	0x13, 0xdb, 0x9b, 0x19, 0x8d, 0xa3, 0xfc, 0xce, 0xf3, 0xdf, 0x1b, 0x4d, 0xc7, 0xf9, 0xb9, 0xb7,
	0xd0, 0xfd, 0xde, 0x42, 0xbf, 0xf7, 0x16, 0xfa, 0x71, 0xb0, 0xb4, 0xfb, 0x83, 0xa5, 0xfd, 0x3a,
	0x58, 0xda, 0xd7, 0xfe, 0x8a, 0xab, 0xdb, 0x6d, 0x7c, 0x93, 0x88, 0xcd, 0xc8, 0x73, 0xec, 0xcf,
	0x43, 0x2e, 0x46, 0x2b, 0x31, 0xe4, 0x31, 0xdd, 0x8d, 0x72, 0x9a, 0xa4, 0x74, 0xc5, 0xe4, 0xa8,
	0x6a, 0x51, 0xdc, 0xaa, 0x2b, 0xf5, 0xe6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xa6, 0x71,
	0x2f, 0x5e, 0x02, 0x00, 0x00,
}

func (m *FirstBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirstBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrivateBlockchain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrivateBlockchain))
		i--
		dAtA[i] = 0x38
	}
	if m.Test != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Test))
		i--
		dAtA[i] = 0x30
	}
	if len(m.StopNetworkCertBundle) > 0 {
		i -= len(m.StopNetworkCertBundle)
		copy(dAtA[i:], m.StopNetworkCertBundle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StopNetworkCertBundle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NodePublicKey) > 0 {
		i -= len(m.NodePublicKey)
		copy(dAtA[i:], m.NodePublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodePublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StopNetwork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StopNetworkCert) > 0 {
		i -= len(m.StopNetworkCert)
		copy(dAtA[i:], m.StopNetworkCert)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StopNetworkCert)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FirstBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovTx(uint64(m.KeyId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTx(uint64(m.Timestamp))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodePublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StopNetworkCertBundle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Test != 0 {
		n += 1 + sovTx(uint64(m.Test))
	}
	if m.PrivateBlockchain != 0 {
		n += 1 + sovTx(uint64(m.PrivateBlockchain))
	}
	return n
}

func (m *StopNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyId != 0 {
		n += 1 + sovTx(uint64(m.KeyId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTx(uint64(m.Timestamp))
	}
	l = len(m.StopNetworkCert)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FirstBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePublicKey = append(m.NodePublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePublicKey == nil {
				m.NodePublicKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopNetworkCertBundle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StopNetworkCertBundle = append(m.StopNetworkCertBundle[:0], dAtA[iNdEx:postIndex]...)
			if m.StopNetworkCertBundle == nil {
				m.StopNetworkCertBundle = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			m.Test = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Test |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateBlockchain", wireType)
			}
			m.PrivateBlockchain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivateBlockchain |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopNetwork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopNetwork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopNetwork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopNetworkCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StopNetworkCert = append(m.StopNetworkCert[:0], dAtA[iNdEx:postIndex]...)
			if m.StopNetworkCert == nil {
				m.StopNetworkCert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
