// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: play.proto

package types

import (
	fmt "fmt"
	pbgo "github.com/IBAX-io/go-ibax/packages/pbgo"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//AfterTxs defined block batch process tx for sql DML
type AfterTxs struct {
	Txs []*AfterTx `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	//TxBinLogSql defined contract exec sql for tx DML
	TxBinLogSql [][]byte      `protobuf:"bytes,2,rep,name=tx_bin_log_sql,json=txBinLogSql,proto3" json:"tx_bin_log_sql,omitempty"`
	Rts         []*RollbackTx `protobuf:"bytes,3,rep,name=rts,proto3" json:"rts,omitempty"`
}

func (m *AfterTxs) Reset()         { *m = AfterTxs{} }
func (m *AfterTxs) String() string { return proto.CompactTextString(m) }
func (*AfterTxs) ProtoMessage()    {}
func (*AfterTxs) Descriptor() ([]byte, []int) {
	return fileDescriptor_e999501ad2a3bf5d, []int{0}
}
func (m *AfterTxs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AfterTxs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AfterTxs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AfterTxs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AfterTxs.Merge(m, src)
}
func (m *AfterTxs) XXX_Size() int {
	return m.Size()
}
func (m *AfterTxs) XXX_DiscardUnknown() {
	xxx_messageInfo_AfterTxs.DiscardUnknown(m)
}

var xxx_messageInfo_AfterTxs proto.InternalMessageInfo

func (m *AfterTxs) GetTxs() []*AfterTx {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *AfterTxs) GetTxBinLogSql() [][]byte {
	if m != nil {
		return m.TxBinLogSql
	}
	return nil
}

func (m *AfterTxs) GetRts() []*RollbackTx {
	if m != nil {
		return m.Rts
	}
	return nil
}

type AfterTx struct {
	UsedTx      []byte          `protobuf:"bytes,1,opt,name=used_tx,json=usedTx,proto3" json:"used_tx,omitempty"`
	Lts         *LogTransaction `protobuf:"bytes,2,opt,name=lts,proto3" json:"lts,omitempty"`
	UpdTxStatus *pbgo.TxResult  `protobuf:"bytes,3,opt,name=upd_tx_status,json=updTxStatus,proto3" json:"upd_tx_status,omitempty"`
}

func (m *AfterTx) Reset()         { *m = AfterTx{} }
func (m *AfterTx) String() string { return proto.CompactTextString(m) }
func (*AfterTx) ProtoMessage()    {}
func (*AfterTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_e999501ad2a3bf5d, []int{1}
}
func (m *AfterTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AfterTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AfterTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AfterTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AfterTx.Merge(m, src)
}
func (m *AfterTx) XXX_Size() int {
	return m.Size()
}
func (m *AfterTx) XXX_DiscardUnknown() {
	xxx_messageInfo_AfterTx.DiscardUnknown(m)
}

var xxx_messageInfo_AfterTx proto.InternalMessageInfo

func (m *AfterTx) GetUsedTx() []byte {
	if m != nil {
		return m.UsedTx
	}
	return nil
}

func (m *AfterTx) GetLts() *LogTransaction {
	if m != nil {
		return m.Lts
	}
	return nil
}

func (m *AfterTx) GetUpdTxStatus() *pbgo.TxResult {
	if m != nil {
		return m.UpdTxStatus
	}
	return nil
}

type RollbackTx struct {
	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BlockId   int64  `protobuf:"varint,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	TxHash    []byte `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	NameTable string `protobuf:"bytes,4,opt,name=name_table,json=nameTable,proto3" json:"name_table,omitempty"`
	TableId   string `protobuf:"bytes,5,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Data      string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	DataHash  []byte `protobuf:"bytes,7,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
}

func (m *RollbackTx) Reset()         { *m = RollbackTx{} }
func (m *RollbackTx) String() string { return proto.CompactTextString(m) }
func (*RollbackTx) ProtoMessage()    {}
func (*RollbackTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_e999501ad2a3bf5d, []int{2}
}
func (m *RollbackTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollbackTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollbackTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollbackTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackTx.Merge(m, src)
}
func (m *RollbackTx) XXX_Size() int {
	return m.Size()
}
func (m *RollbackTx) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackTx.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackTx proto.InternalMessageInfo

func (m *RollbackTx) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RollbackTx) GetBlockId() int64 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

func (m *RollbackTx) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *RollbackTx) GetNameTable() string {
	if m != nil {
		return m.NameTable
	}
	return ""
}

func (m *RollbackTx) GetTableId() string {
	if m != nil {
		return m.TableId
	}
	return ""
}

func (m *RollbackTx) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *RollbackTx) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

type LogTransaction struct {
	Hash         []byte                  `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Block        int64                   `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	TxData       []byte                  `protobuf:"bytes,3,opt,name=tx_data,json=txData,proto3" json:"tx_data,omitempty"`
	Timestamp    int64                   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Address      int64                   `protobuf:"varint,5,opt,name=address,proto3" json:"address,omitempty"`
	EcosystemId  int64                   `protobuf:"varint,6,opt,name=ecosystem_id,json=ecosystemId,proto3" json:"ecosystem_id,omitempty"`
	ContractName string                  `protobuf:"bytes,7,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	InvokeStatus pbgo.TxInvokeStatusCode `protobuf:"varint,8,opt,name=invoke_status,json=invokeStatus,proto3,enum=pbgo.TxInvokeStatusCode" json:"invoke_status,omitempty"`
}

func (m *LogTransaction) Reset()         { *m = LogTransaction{} }
func (m *LogTransaction) String() string { return proto.CompactTextString(m) }
func (*LogTransaction) ProtoMessage()    {}
func (*LogTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e999501ad2a3bf5d, []int{3}
}
func (m *LogTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogTransaction.Merge(m, src)
}
func (m *LogTransaction) XXX_Size() int {
	return m.Size()
}
func (m *LogTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_LogTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_LogTransaction proto.InternalMessageInfo

func (m *LogTransaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *LogTransaction) GetBlock() int64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *LogTransaction) GetTxData() []byte {
	if m != nil {
		return m.TxData
	}
	return nil
}

func (m *LogTransaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LogTransaction) GetAddress() int64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *LogTransaction) GetEcosystemId() int64 {
	if m != nil {
		return m.EcosystemId
	}
	return 0
}

func (m *LogTransaction) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *LogTransaction) GetInvokeStatus() pbgo.TxInvokeStatusCode {
	if m != nil {
		return m.InvokeStatus
	}
	return pbgo.TxInvokeStatusCode_SUCCESS
}

func init() {
	proto.RegisterType((*AfterTxs)(nil), "types.AfterTxs")
	proto.RegisterType((*AfterTx)(nil), "types.AfterTx")
	proto.RegisterType((*RollbackTx)(nil), "types.RollbackTx")
	proto.RegisterType((*LogTransaction)(nil), "types.LogTransaction")
}

func init() { proto.RegisterFile("play.proto", fileDescriptor_e999501ad2a3bf5d) }

var fileDescriptor_e999501ad2a3bf5d = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x53, 0xbb, 0x6e, 0x13, 0x41,
	0x14, 0xcd, 0x7a, 0x13, 0x3f, 0xae, 0x1d, 0x4b, 0x8c, 0x40, 0x2c, 0x2f, 0x6b, 0x71, 0x0a, 0x4c,
	0x11, 0x5b, 0x32, 0x35, 0x45, 0x12, 0x0a, 0x2c, 0x45, 0x14, 0x13, 0x17, 0x88, 0x66, 0x35, 0xbb,
	0x33, 0xac, 0x47, 0x5e, 0xef, 0x6c, 0x76, 0xae, 0xa3, 0x49, 0xc5, 0x2f, 0x20, 0x7e, 0x87, 0x1f,
	0xa0, 0x4c, 0x49, 0x89, 0x92, 0x1f, 0x41, 0x73, 0x6d, 0x27, 0x50, 0x79, 0xee, 0x39, 0x57, 0xe7,
	0x31, 0xe3, 0x05, 0xa8, 0x0a, 0x71, 0x3d, 0xae, 0x6a, 0x83, 0x86, 0x1d, 0xe0, 0x75, 0xa5, 0xec,
	0xf3, 0x36, 0xba, 0x0d, 0x30, 0xbc, 0x82, 0xf6, 0xc9, 0x57, 0x54, 0xf5, 0xdc, 0x59, 0x16, 0x43,
	0x88, 0xce, 0x46, 0x41, 0x1c, 0x8e, 0xba, 0xd3, 0xfe, 0x98, 0x56, 0xc7, 0x5b, 0x96, 0x7b, 0x8a,
	0x1d, 0x41, 0x1f, 0x5d, 0x92, 0xea, 0x32, 0x29, 0x4c, 0x9e, 0xd8, 0xcb, 0x22, 0x6a, 0xc4, 0xe1,
	0xa8, 0xc7, 0xbb, 0xe8, 0x4e, 0x75, 0x79, 0x6e, 0xf2, 0x8b, 0xcb, 0x82, 0x1d, 0x41, 0x58, 0xa3,
	0x8d, 0x42, 0x92, 0x79, 0xb4, 0x95, 0xe1, 0xa6, 0x28, 0x52, 0x91, 0x2d, 0xbd, 0x52, 0x8d, 0x76,
	0xf8, 0x0d, 0x5a, 0x5b, 0x65, 0xf6, 0x14, 0x5a, 0x6b, 0xab, 0x64, 0x82, 0x2e, 0x0a, 0xe2, 0x60,
	0xd4, 0xe3, 0x4d, 0x3f, 0xce, 0x1d, 0x7b, 0x03, 0x61, 0x81, 0x36, 0x6a, 0xc4, 0xc1, 0xa8, 0x3b,
	0x7d, 0xb2, 0x15, 0x3a, 0x37, 0xf9, 0xbc, 0x16, 0xa5, 0x15, 0x19, 0x6a, 0x53, 0x72, 0xbf, 0xc1,
	0xa6, 0x70, 0xb8, 0xae, 0xbc, 0x40, 0x62, 0x51, 0xe0, 0xda, 0x7b, 0x07, 0x54, 0xa1, 0x4a, 0x73,
	0x33, 0x9e, 0x3b, 0xae, 0xec, 0xba, 0x40, 0xde, 0x5d, 0x57, 0x72, 0xee, 0x2e, 0x68, 0x65, 0xf8,
	0x33, 0x00, 0x78, 0x08, 0xc5, 0xfa, 0xd0, 0xd0, 0x92, 0xfc, 0x43, 0xde, 0xd0, 0x92, 0x3d, 0x83,
	0x76, 0x5a, 0x98, 0x6c, 0x99, 0x68, 0x49, 0x01, 0x42, 0xde, 0xa2, 0x79, 0x26, 0x7d, 0x5e, 0x74,
	0xc9, 0x42, 0xd8, 0x05, 0xf9, 0xf4, 0x78, 0x13, 0xdd, 0x47, 0x61, 0x17, 0xec, 0x15, 0x40, 0x29,
	0x56, 0x2a, 0x41, 0x91, 0x16, 0x2a, 0xda, 0x8f, 0x83, 0x51, 0x87, 0x77, 0x3c, 0x32, 0xf7, 0x80,
	0x97, 0x24, 0xc6, 0x4b, 0x1e, 0x10, 0xd9, 0xa2, 0x79, 0x26, 0x19, 0x83, 0x7d, 0x29, 0x50, 0x44,
	0x4d, 0x82, 0xe9, 0xcc, 0x5e, 0x40, 0xc7, 0xff, 0x6e, 0x8c, 0x5a, 0x64, 0xd4, 0xf6, 0x80, 0xb7,
	0x1a, 0xfe, 0x68, 0x40, 0xff, 0xff, 0x9b, 0xf0, 0x1a, 0xb4, 0xba, 0xb9, 0x43, 0x3a, 0xb3, 0xc7,
	0x70, 0x40, 0xa9, 0xb7, 0x15, 0x36, 0xc3, 0xb6, 0x00, 0x19, 0xde, 0x17, 0xf8, 0xe0, 0x2d, 0x5f,
	0x42, 0x07, 0xf5, 0x4a, 0x59, 0x14, 0xab, 0x8a, 0xf2, 0x87, 0xfc, 0x01, 0x60, 0x11, 0xb4, 0x84,
	0x94, 0xb5, 0xb2, 0x96, 0xe2, 0x87, 0x7c, 0x37, 0xb2, 0xd7, 0xd0, 0x53, 0x99, 0xb1, 0xd7, 0x16,
	0xd5, 0xca, 0xb7, 0x6b, 0x12, 0xdd, 0xbd, 0xc7, 0x66, 0x92, 0x1d, 0xc1, 0x61, 0x66, 0x4a, 0xac,
	0x45, 0x86, 0x89, 0xbf, 0x12, 0x6a, 0xd4, 0xe1, 0xbd, 0x1d, 0xf8, 0x49, 0xac, 0x14, 0x7b, 0x0f,
	0x87, 0xba, 0xbc, 0x32, 0x4b, 0xb5, 0x7b, 0xc7, 0x76, 0x1c, 0x8c, 0xfa, 0xd3, 0x68, 0xf7, 0x8e,
	0x33, 0x22, 0x37, 0x0f, 0x78, 0x66, 0xa4, 0xe2, 0x3d, 0xfd, 0x0f, 0x72, 0x7a, 0xf6, 0xeb, 0x76,
	0x10, 0xdc, 0xdc, 0x0e, 0x82, 0x3f, 0xb7, 0x83, 0xe0, 0xfb, 0xdd, 0x60, 0xef, 0xe6, 0x6e, 0xb0,
	0xf7, 0xfb, 0x6e, 0xb0, 0xf7, 0xe5, 0x6d, 0xae, 0x71, 0xb1, 0x4e, 0xc7, 0x99, 0x59, 0x4d, 0x66,
	0xa7, 0x27, 0x9f, 0x8f, 0xb5, 0x99, 0xe4, 0xe6, 0x58, 0xa7, 0xc2, 0x4d, 0x2a, 0x91, 0x2d, 0x45,
	0xae, 0xec, 0x84, 0xfe, 0x5f, 0x69, 0x93, 0xbe, 0x8b, 0x77, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x73, 0xb7, 0xe1, 0xe5, 0x36, 0x03, 0x00, 0x00,
}

func (m *AfterTxs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AfterTxs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AfterTxs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rts) > 0 {
		for iNdEx := len(m.Rts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlay(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TxBinLogSql) > 0 {
		for iNdEx := len(m.TxBinLogSql) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxBinLogSql[iNdEx])
			copy(dAtA[i:], m.TxBinLogSql[iNdEx])
			i = encodeVarintPlay(dAtA, i, uint64(len(m.TxBinLogSql[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlay(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AfterTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AfterTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AfterTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdTxStatus != nil {
		{
			size, err := m.UpdTxStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Lts != nil {
		{
			size, err := m.Lts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UsedTx) > 0 {
		i -= len(m.UsedTx)
		copy(dAtA[i:], m.UsedTx)
		i = encodeVarintPlay(dAtA, i, uint64(len(m.UsedTx)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollbackTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollbackTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintPlay(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPlay(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TableId) > 0 {
		i -= len(m.TableId)
		copy(dAtA[i:], m.TableId)
		i = encodeVarintPlay(dAtA, i, uint64(len(m.TableId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NameTable) > 0 {
		i -= len(m.NameTable)
		copy(dAtA[i:], m.NameTable)
		i = encodeVarintPlay(dAtA, i, uint64(len(m.NameTable)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintPlay(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockId != 0 {
		i = encodeVarintPlay(dAtA, i, uint64(m.BlockId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPlay(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvokeStatus != 0 {
		i = encodeVarintPlay(dAtA, i, uint64(m.InvokeStatus))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintPlay(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EcosystemId != 0 {
		i = encodeVarintPlay(dAtA, i, uint64(m.EcosystemId))
		i--
		dAtA[i] = 0x30
	}
	if m.Address != 0 {
		i = encodeVarintPlay(dAtA, i, uint64(m.Address))
		i--
		dAtA[i] = 0x28
	}
	if m.Timestamp != 0 {
		i = encodeVarintPlay(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxData) > 0 {
		i -= len(m.TxData)
		copy(dAtA[i:], m.TxData)
		i = encodeVarintPlay(dAtA, i, uint64(len(m.TxData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Block != 0 {
		i = encodeVarintPlay(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPlay(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlay(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlay(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AfterTxs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovPlay(uint64(l))
		}
	}
	if len(m.TxBinLogSql) > 0 {
		for _, b := range m.TxBinLogSql {
			l = len(b)
			n += 1 + l + sovPlay(uint64(l))
		}
	}
	if len(m.Rts) > 0 {
		for _, e := range m.Rts {
			l = e.Size()
			n += 1 + l + sovPlay(uint64(l))
		}
	}
	return n
}

func (m *AfterTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UsedTx)
	if l > 0 {
		n += 1 + l + sovPlay(uint64(l))
	}
	if m.Lts != nil {
		l = m.Lts.Size()
		n += 1 + l + sovPlay(uint64(l))
	}
	if m.UpdTxStatus != nil {
		l = m.UpdTxStatus.Size()
		n += 1 + l + sovPlay(uint64(l))
	}
	return n
}

func (m *RollbackTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlay(uint64(m.Id))
	}
	if m.BlockId != 0 {
		n += 1 + sovPlay(uint64(m.BlockId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovPlay(uint64(l))
	}
	l = len(m.NameTable)
	if l > 0 {
		n += 1 + l + sovPlay(uint64(l))
	}
	l = len(m.TableId)
	if l > 0 {
		n += 1 + l + sovPlay(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPlay(uint64(l))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovPlay(uint64(l))
	}
	return n
}

func (m *LogTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPlay(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovPlay(uint64(m.Block))
	}
	l = len(m.TxData)
	if l > 0 {
		n += 1 + l + sovPlay(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovPlay(uint64(m.Timestamp))
	}
	if m.Address != 0 {
		n += 1 + sovPlay(uint64(m.Address))
	}
	if m.EcosystemId != 0 {
		n += 1 + sovPlay(uint64(m.EcosystemId))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovPlay(uint64(l))
	}
	if m.InvokeStatus != 0 {
		n += 1 + sovPlay(uint64(m.InvokeStatus))
	}
	return n
}

func sovPlay(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlay(x uint64) (n int) {
	return sovPlay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AfterTxs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AfterTxs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AfterTxs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &AfterTx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBinLogSql", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBinLogSql = append(m.TxBinLogSql, make([]byte, postIndex-iNdEx))
			copy(m.TxBinLogSql[len(m.TxBinLogSql)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rts = append(m.Rts, &RollbackTx{})
			if err := m.Rts[len(m.Rts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AfterTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AfterTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AfterTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedTx = append(m.UsedTx[:0], dAtA[iNdEx:postIndex]...)
			if m.UsedTx == nil {
				m.UsedTx = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lts == nil {
				m.Lts = &LogTransaction{}
			}
			if err := m.Lts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdTxStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdTxStatus == nil {
				m.UpdTxStatus = &pbgo.TxResult{}
			}
			if err := m.UpdTxStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			m.BlockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameTable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameTable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = append(m.DataHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DataHash == nil {
				m.DataHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxData = append(m.TxData[:0], dAtA[iNdEx:postIndex]...)
			if m.TxData == nil {
				m.TxData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcosystemId", wireType)
			}
			m.EcosystemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EcosystemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvokeStatus", wireType)
			}
			m.InvokeStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvokeStatus |= pbgo.TxInvokeStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlay
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlay
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlay
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlay        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlay          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlay = fmt.Errorf("proto: unexpected end of group")
)
